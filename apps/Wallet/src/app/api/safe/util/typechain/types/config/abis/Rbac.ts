/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface RbacInterface extends utils.Interface {
  functions: {
    "addDelegate(address)": FunctionFragment;
    "delegates(address,uint48)": FunctionFragment;
    "delegatesStart(address)": FunctionFragment;
    "executeTransfer(address,address,uint96)": FunctionFragment;
    "getDelegates(address,uint48,uint8)": FunctionFragment;
    "isDelegate(address,address)": FunctionFragment;
    "removeDelegate(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addDelegate"
      | "delegates"
      | "delegatesStart"
      | "executeTransfer"
      | "getDelegates"
      | "isDelegate"
      | "removeDelegate"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addDelegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegates",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatesStart",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegates",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDelegate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDelegate",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegatesStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDelegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeDelegate",
    data: BytesLike
  ): Result;

  events: {
    "AddDelegate(address,address)": EventFragment;
    "ExecuteAllowanceTransfer(address,address,address,uint96)": EventFragment;
    "RemoveDelegate(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddDelegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteAllowanceTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveDelegate"): EventFragment;
}

export interface AddDelegateEventObject {
  safe: string;
  delegate: string;
}
export type AddDelegateEvent = TypedEvent<
  [string, string],
  AddDelegateEventObject
>;

export type AddDelegateEventFilter = TypedEventFilter<AddDelegateEvent>;

export interface ExecuteAllowanceTransferEventObject {
  safe: string;
  delegate: string;
  to: string;
  value: BigNumber;
}
export type ExecuteAllowanceTransferEvent = TypedEvent<
  [string, string, string, BigNumber],
  ExecuteAllowanceTransferEventObject
>;

export type ExecuteAllowanceTransferEventFilter =
  TypedEventFilter<ExecuteAllowanceTransferEvent>;

export interface RemoveDelegateEventObject {
  safe: string;
  delegate: string;
}
export type RemoveDelegateEvent = TypedEvent<
  [string, string],
  RemoveDelegateEventObject
>;

export type RemoveDelegateEventFilter = TypedEventFilter<RemoveDelegateEvent>;

export interface Rbac extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RbacInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDelegate(
      delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delegates(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        delegate: string;
        prev: number;
        next: number;
      }
    >;

    delegatesStart(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    executeTransfer(
      safe: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getDelegates(
      safe: string,
      start: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], number] & { results: string[]; next: number }>;

    isDelegate(
      safe: string,
      delegate: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeDelegate(
      delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addDelegate(
    delegate: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delegates(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number] & { delegate: string; prev: number; next: number }
  >;

  delegatesStart(arg0: string, overrides?: CallOverrides): Promise<number>;

  executeTransfer(
    safe: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getDelegates(
    safe: string,
    start: BigNumberish,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], number] & { results: string[]; next: number }>;

  isDelegate(
    safe: string,
    delegate: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeDelegate(
    delegate: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDelegate(delegate: string, overrides?: CallOverrides): Promise<void>;

    delegates(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        delegate: string;
        prev: number;
        next: number;
      }
    >;

    delegatesStart(arg0: string, overrides?: CallOverrides): Promise<number>;

    executeTransfer(
      safe: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDelegates(
      safe: string,
      start: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], number] & { results: string[]; next: number }>;

    isDelegate(
      safe: string,
      delegate: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeDelegate(delegate: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddDelegate(address,address)"(
      safe?: string | null,
      delegate?: null
    ): AddDelegateEventFilter;
    AddDelegate(safe?: string | null, delegate?: null): AddDelegateEventFilter;

    "ExecuteAllowanceTransfer(address,address,address,uint96)"(
      safe?: string | null,
      delegate?: null,
      to?: null,
      value?: null
    ): ExecuteAllowanceTransferEventFilter;
    ExecuteAllowanceTransfer(
      safe?: string | null,
      delegate?: null,
      to?: null,
      value?: null
    ): ExecuteAllowanceTransferEventFilter;

    "RemoveDelegate(address,address)"(
      safe?: string | null,
      delegate?: null
    ): RemoveDelegateEventFilter;
    RemoveDelegate(
      safe?: string | null,
      delegate?: null
    ): RemoveDelegateEventFilter;
  };

  estimateGas: {
    addDelegate(
      delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delegates(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatesStart(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    executeTransfer(
      safe: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getDelegates(
      safe: string,
      start: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDelegate(
      safe: string,
      delegate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeDelegate(
      delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDelegate(
      delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delegates(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegatesStart(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeTransfer(
      safe: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getDelegates(
      safe: string,
      start: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDelegate(
      safe: string,
      delegate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeDelegate(
      delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
